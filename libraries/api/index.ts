export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  DateTime: any,
  Upload: any,
};

export type Account = {
   __typename?: 'Account',
  id: Scalars['ID'],
  password: Scalars['String'],
  clientID: Scalars['String'],
  user: User,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type AccountWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  password?: Maybe<Scalars['String']>,
  password_not?: Maybe<Scalars['String']>,
  password_in?: Maybe<Array<Scalars['String']>>,
  password_not_in?: Maybe<Array<Scalars['String']>>,
  password_lt?: Maybe<Scalars['String']>,
  password_lte?: Maybe<Scalars['String']>,
  password_gt?: Maybe<Scalars['String']>,
  password_gte?: Maybe<Scalars['String']>,
  password_contains?: Maybe<Scalars['String']>,
  password_not_contains?: Maybe<Scalars['String']>,
  password_starts_with?: Maybe<Scalars['String']>,
  password_not_starts_with?: Maybe<Scalars['String']>,
  password_ends_with?: Maybe<Scalars['String']>,
  password_not_ends_with?: Maybe<Scalars['String']>,
  clientID?: Maybe<Scalars['String']>,
  clientID_not?: Maybe<Scalars['String']>,
  clientID_in?: Maybe<Array<Scalars['String']>>,
  clientID_not_in?: Maybe<Array<Scalars['String']>>,
  clientID_lt?: Maybe<Scalars['String']>,
  clientID_lte?: Maybe<Scalars['String']>,
  clientID_gt?: Maybe<Scalars['String']>,
  clientID_gte?: Maybe<Scalars['String']>,
  clientID_contains?: Maybe<Scalars['String']>,
  clientID_not_contains?: Maybe<Scalars['String']>,
  clientID_starts_with?: Maybe<Scalars['String']>,
  clientID_not_starts_with?: Maybe<Scalars['String']>,
  clientID_ends_with?: Maybe<Scalars['String']>,
  clientID_not_ends_with?: Maybe<Scalars['String']>,
  user?: Maybe<UserWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<AccountWhereInput>>,
  OR?: Maybe<Array<AccountWhereInput>>,
  NOT?: Maybe<Array<AccountWhereInput>>,
};

export type AdminBankAccount = {
   __typename?: 'AdminBankAccount',
  id: Scalars['ID'],
  fullName: Scalars['String'],
  accountNumber: Scalars['String'],
  bankAccountType: BankAccountType,
  bank: Bank,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type AdminBankAccountWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  fullName?: Maybe<Scalars['String']>,
  fullName_not?: Maybe<Scalars['String']>,
  fullName_in?: Maybe<Array<Scalars['String']>>,
  fullName_not_in?: Maybe<Array<Scalars['String']>>,
  fullName_lt?: Maybe<Scalars['String']>,
  fullName_lte?: Maybe<Scalars['String']>,
  fullName_gt?: Maybe<Scalars['String']>,
  fullName_gte?: Maybe<Scalars['String']>,
  fullName_contains?: Maybe<Scalars['String']>,
  fullName_not_contains?: Maybe<Scalars['String']>,
  fullName_starts_with?: Maybe<Scalars['String']>,
  fullName_not_starts_with?: Maybe<Scalars['String']>,
  fullName_ends_with?: Maybe<Scalars['String']>,
  fullName_not_ends_with?: Maybe<Scalars['String']>,
  accountNumber?: Maybe<Scalars['String']>,
  accountNumber_not?: Maybe<Scalars['String']>,
  accountNumber_in?: Maybe<Array<Scalars['String']>>,
  accountNumber_not_in?: Maybe<Array<Scalars['String']>>,
  accountNumber_lt?: Maybe<Scalars['String']>,
  accountNumber_lte?: Maybe<Scalars['String']>,
  accountNumber_gt?: Maybe<Scalars['String']>,
  accountNumber_gte?: Maybe<Scalars['String']>,
  accountNumber_contains?: Maybe<Scalars['String']>,
  accountNumber_not_contains?: Maybe<Scalars['String']>,
  accountNumber_starts_with?: Maybe<Scalars['String']>,
  accountNumber_not_starts_with?: Maybe<Scalars['String']>,
  accountNumber_ends_with?: Maybe<Scalars['String']>,
  accountNumber_not_ends_with?: Maybe<Scalars['String']>,
  bankAccountType?: Maybe<BankAccountTypeWhereInput>,
  bank?: Maybe<BankWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<AdminBankAccountWhereInput>>,
  OR?: Maybe<Array<AdminBankAccountWhereInput>>,
  NOT?: Maybe<Array<AdminBankAccountWhereInput>>,
};

export type AuthenticateInput = {
  email: Scalars['String'],
  password: Scalars['String'],
};

export type Bank = {
   __typename?: 'Bank',
  id: Scalars['ID'],
  name: Scalars['String'],
  imgHash?: Maybe<Scalars['String']>,
};

export type BankAccount = {
   __typename?: 'BankAccount',
  id: Scalars['ID'],
  fullName: Scalars['String'],
  accountNumber: Scalars['String'],
  bankAccountType: BankAccountType,
  bank: Bank,
  isCurrent?: Maybe<Scalars['Boolean']>,
  user: User,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  createdAt: Scalars['DateTime'],
};

export enum BankAccountOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  FullNameAsc = 'fullName_ASC',
  FullNameDesc = 'fullName_DESC',
  AccountNumberAsc = 'accountNumber_ASC',
  AccountNumberDesc = 'accountNumber_DESC',
  IsCurrentAsc = 'isCurrent_ASC',
  IsCurrentDesc = 'isCurrent_DESC',
  VerifiedAtAsc = 'verifiedAt_ASC',
  VerifiedAtDesc = 'verifiedAt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC'
}

export type BankAccountType = {
   __typename?: 'BankAccountType',
  id: Scalars['ID'],
  type: Scalars['String'],
  currency: Currency,
};

export type BankAccountTypeWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  type?: Maybe<Scalars['String']>,
  type_not?: Maybe<Scalars['String']>,
  type_in?: Maybe<Array<Scalars['String']>>,
  type_not_in?: Maybe<Array<Scalars['String']>>,
  type_lt?: Maybe<Scalars['String']>,
  type_lte?: Maybe<Scalars['String']>,
  type_gt?: Maybe<Scalars['String']>,
  type_gte?: Maybe<Scalars['String']>,
  type_contains?: Maybe<Scalars['String']>,
  type_not_contains?: Maybe<Scalars['String']>,
  type_starts_with?: Maybe<Scalars['String']>,
  type_not_starts_with?: Maybe<Scalars['String']>,
  type_ends_with?: Maybe<Scalars['String']>,
  type_not_ends_with?: Maybe<Scalars['String']>,
  currency?: Maybe<CurrencyWhereInput>,
  AND?: Maybe<Array<BankAccountTypeWhereInput>>,
  OR?: Maybe<Array<BankAccountTypeWhereInput>>,
  NOT?: Maybe<Array<BankAccountTypeWhereInput>>,
};

export type BankAccountWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  fullName?: Maybe<Scalars['String']>,
  fullName_not?: Maybe<Scalars['String']>,
  fullName_in?: Maybe<Array<Scalars['String']>>,
  fullName_not_in?: Maybe<Array<Scalars['String']>>,
  fullName_lt?: Maybe<Scalars['String']>,
  fullName_lte?: Maybe<Scalars['String']>,
  fullName_gt?: Maybe<Scalars['String']>,
  fullName_gte?: Maybe<Scalars['String']>,
  fullName_contains?: Maybe<Scalars['String']>,
  fullName_not_contains?: Maybe<Scalars['String']>,
  fullName_starts_with?: Maybe<Scalars['String']>,
  fullName_not_starts_with?: Maybe<Scalars['String']>,
  fullName_ends_with?: Maybe<Scalars['String']>,
  fullName_not_ends_with?: Maybe<Scalars['String']>,
  accountNumber?: Maybe<Scalars['String']>,
  accountNumber_not?: Maybe<Scalars['String']>,
  accountNumber_in?: Maybe<Array<Scalars['String']>>,
  accountNumber_not_in?: Maybe<Array<Scalars['String']>>,
  accountNumber_lt?: Maybe<Scalars['String']>,
  accountNumber_lte?: Maybe<Scalars['String']>,
  accountNumber_gt?: Maybe<Scalars['String']>,
  accountNumber_gte?: Maybe<Scalars['String']>,
  accountNumber_contains?: Maybe<Scalars['String']>,
  accountNumber_not_contains?: Maybe<Scalars['String']>,
  accountNumber_starts_with?: Maybe<Scalars['String']>,
  accountNumber_not_starts_with?: Maybe<Scalars['String']>,
  accountNumber_ends_with?: Maybe<Scalars['String']>,
  accountNumber_not_ends_with?: Maybe<Scalars['String']>,
  bankAccountType?: Maybe<BankAccountTypeWhereInput>,
  bank?: Maybe<BankWhereInput>,
  isCurrent?: Maybe<Scalars['Boolean']>,
  isCurrent_not?: Maybe<Scalars['Boolean']>,
  user?: Maybe<UserWhereInput>,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  verifiedAt_not?: Maybe<Scalars['DateTime']>,
  verifiedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_lt?: Maybe<Scalars['DateTime']>,
  verifiedAt_lte?: Maybe<Scalars['DateTime']>,
  verifiedAt_gt?: Maybe<Scalars['DateTime']>,
  verifiedAt_gte?: Maybe<Scalars['DateTime']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<BankAccountWhereInput>>,
  OR?: Maybe<Array<BankAccountWhereInput>>,
  NOT?: Maybe<Array<BankAccountWhereInput>>,
};

export type BankWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  name?: Maybe<Scalars['String']>,
  name_not?: Maybe<Scalars['String']>,
  name_in?: Maybe<Array<Scalars['String']>>,
  name_not_in?: Maybe<Array<Scalars['String']>>,
  name_lt?: Maybe<Scalars['String']>,
  name_lte?: Maybe<Scalars['String']>,
  name_gt?: Maybe<Scalars['String']>,
  name_gte?: Maybe<Scalars['String']>,
  name_contains?: Maybe<Scalars['String']>,
  name_not_contains?: Maybe<Scalars['String']>,
  name_starts_with?: Maybe<Scalars['String']>,
  name_not_starts_with?: Maybe<Scalars['String']>,
  name_ends_with?: Maybe<Scalars['String']>,
  name_not_ends_with?: Maybe<Scalars['String']>,
  imgHash?: Maybe<Scalars['String']>,
  imgHash_not?: Maybe<Scalars['String']>,
  imgHash_in?: Maybe<Array<Scalars['String']>>,
  imgHash_not_in?: Maybe<Array<Scalars['String']>>,
  imgHash_lt?: Maybe<Scalars['String']>,
  imgHash_lte?: Maybe<Scalars['String']>,
  imgHash_gt?: Maybe<Scalars['String']>,
  imgHash_gte?: Maybe<Scalars['String']>,
  imgHash_contains?: Maybe<Scalars['String']>,
  imgHash_not_contains?: Maybe<Scalars['String']>,
  imgHash_starts_with?: Maybe<Scalars['String']>,
  imgHash_not_starts_with?: Maybe<Scalars['String']>,
  imgHash_ends_with?: Maybe<Scalars['String']>,
  imgHash_not_ends_with?: Maybe<Scalars['String']>,
  AND?: Maybe<Array<BankWhereInput>>,
  OR?: Maybe<Array<BankWhereInput>>,
  NOT?: Maybe<Array<BankWhereInput>>,
};

export type Contact = {
   __typename?: 'Contact',
  id: Scalars['ID'],
  email?: Maybe<Array<Email>>,
  phoneNumber?: Maybe<Array<PhoneNumber>>,
  user: User,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};


export type ContactEmailArgs = {
  where?: Maybe<EmailWhereInput>,
  orderBy?: Maybe<EmailOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type ContactPhoneNumberArgs = {
  where?: Maybe<PhoneNumberWhereInput>,
  orderBy?: Maybe<PhoneNumberOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type ContactWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  email_every?: Maybe<EmailWhereInput>,
  email_some?: Maybe<EmailWhereInput>,
  email_none?: Maybe<EmailWhereInput>,
  phoneNumber_every?: Maybe<PhoneNumberWhereInput>,
  phoneNumber_some?: Maybe<PhoneNumberWhereInput>,
  phoneNumber_none?: Maybe<PhoneNumberWhereInput>,
  user?: Maybe<UserWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<ContactWhereInput>>,
  OR?: Maybe<Array<ContactWhereInput>>,
  NOT?: Maybe<Array<ContactWhereInput>>,
};

export type CryptoAccount = {
   __typename?: 'CryptoAccount',
  id: Scalars['ID'],
  address: Scalars['String'],
  user: User,
  currency: Currency,
  createdAt: Scalars['DateTime'],
};

export enum CryptoAccountOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC'
}

export type CryptoAccountWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  address?: Maybe<Scalars['String']>,
  address_not?: Maybe<Scalars['String']>,
  address_in?: Maybe<Array<Scalars['String']>>,
  address_not_in?: Maybe<Array<Scalars['String']>>,
  address_lt?: Maybe<Scalars['String']>,
  address_lte?: Maybe<Scalars['String']>,
  address_gt?: Maybe<Scalars['String']>,
  address_gte?: Maybe<Scalars['String']>,
  address_contains?: Maybe<Scalars['String']>,
  address_not_contains?: Maybe<Scalars['String']>,
  address_starts_with?: Maybe<Scalars['String']>,
  address_not_starts_with?: Maybe<Scalars['String']>,
  address_ends_with?: Maybe<Scalars['String']>,
  address_not_ends_with?: Maybe<Scalars['String']>,
  user?: Maybe<UserWhereInput>,
  currency?: Maybe<CurrencyWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<CryptoAccountWhereInput>>,
  OR?: Maybe<Array<CryptoAccountWhereInput>>,
  NOT?: Maybe<Array<CryptoAccountWhereInput>>,
};

export type Currency = {
   __typename?: 'Currency',
  id: Scalars['ID'],
  name: Scalars['String'],
  symbol: Scalars['String'],
  createdAt: Scalars['DateTime'],
};

export type CurrencyWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  name?: Maybe<Scalars['String']>,
  name_not?: Maybe<Scalars['String']>,
  name_in?: Maybe<Array<Scalars['String']>>,
  name_not_in?: Maybe<Array<Scalars['String']>>,
  name_lt?: Maybe<Scalars['String']>,
  name_lte?: Maybe<Scalars['String']>,
  name_gt?: Maybe<Scalars['String']>,
  name_gte?: Maybe<Scalars['String']>,
  name_contains?: Maybe<Scalars['String']>,
  name_not_contains?: Maybe<Scalars['String']>,
  name_starts_with?: Maybe<Scalars['String']>,
  name_not_starts_with?: Maybe<Scalars['String']>,
  name_ends_with?: Maybe<Scalars['String']>,
  name_not_ends_with?: Maybe<Scalars['String']>,
  symbol?: Maybe<Scalars['String']>,
  symbol_not?: Maybe<Scalars['String']>,
  symbol_in?: Maybe<Array<Scalars['String']>>,
  symbol_not_in?: Maybe<Array<Scalars['String']>>,
  symbol_lt?: Maybe<Scalars['String']>,
  symbol_lte?: Maybe<Scalars['String']>,
  symbol_gt?: Maybe<Scalars['String']>,
  symbol_gte?: Maybe<Scalars['String']>,
  symbol_contains?: Maybe<Scalars['String']>,
  symbol_not_contains?: Maybe<Scalars['String']>,
  symbol_starts_with?: Maybe<Scalars['String']>,
  symbol_not_starts_with?: Maybe<Scalars['String']>,
  symbol_ends_with?: Maybe<Scalars['String']>,
  symbol_not_ends_with?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<CurrencyWhereInput>>,
  OR?: Maybe<Array<CurrencyWhereInput>>,
  NOT?: Maybe<Array<CurrencyWhereInput>>,
};


export type Dpi = {
   __typename?: 'DPI',
  id: Scalars['ID'],
  imgHash: Scalars['String'],
  firstName?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  CUI?: Maybe<Scalars['String']>,
  dateOfBirth?: Maybe<Scalars['DateTime']>,
  genre?: Maybe<Genre>,
  expiresAt?: Maybe<Scalars['DateTime']>,
  isCurrent?: Maybe<Scalars['Boolean']>,
  governmentID: GovernmentId,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  createdAt: Scalars['DateTime'],
};

export type DpiWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  imgHash?: Maybe<Scalars['String']>,
  imgHash_not?: Maybe<Scalars['String']>,
  imgHash_in?: Maybe<Array<Scalars['String']>>,
  imgHash_not_in?: Maybe<Array<Scalars['String']>>,
  imgHash_lt?: Maybe<Scalars['String']>,
  imgHash_lte?: Maybe<Scalars['String']>,
  imgHash_gt?: Maybe<Scalars['String']>,
  imgHash_gte?: Maybe<Scalars['String']>,
  imgHash_contains?: Maybe<Scalars['String']>,
  imgHash_not_contains?: Maybe<Scalars['String']>,
  imgHash_starts_with?: Maybe<Scalars['String']>,
  imgHash_not_starts_with?: Maybe<Scalars['String']>,
  imgHash_ends_with?: Maybe<Scalars['String']>,
  imgHash_not_ends_with?: Maybe<Scalars['String']>,
  firstName?: Maybe<Scalars['String']>,
  firstName_not?: Maybe<Scalars['String']>,
  firstName_in?: Maybe<Array<Scalars['String']>>,
  firstName_not_in?: Maybe<Array<Scalars['String']>>,
  firstName_lt?: Maybe<Scalars['String']>,
  firstName_lte?: Maybe<Scalars['String']>,
  firstName_gt?: Maybe<Scalars['String']>,
  firstName_gte?: Maybe<Scalars['String']>,
  firstName_contains?: Maybe<Scalars['String']>,
  firstName_not_contains?: Maybe<Scalars['String']>,
  firstName_starts_with?: Maybe<Scalars['String']>,
  firstName_not_starts_with?: Maybe<Scalars['String']>,
  firstName_ends_with?: Maybe<Scalars['String']>,
  firstName_not_ends_with?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  lastName_not?: Maybe<Scalars['String']>,
  lastName_in?: Maybe<Array<Scalars['String']>>,
  lastName_not_in?: Maybe<Array<Scalars['String']>>,
  lastName_lt?: Maybe<Scalars['String']>,
  lastName_lte?: Maybe<Scalars['String']>,
  lastName_gt?: Maybe<Scalars['String']>,
  lastName_gte?: Maybe<Scalars['String']>,
  lastName_contains?: Maybe<Scalars['String']>,
  lastName_not_contains?: Maybe<Scalars['String']>,
  lastName_starts_with?: Maybe<Scalars['String']>,
  lastName_not_starts_with?: Maybe<Scalars['String']>,
  lastName_ends_with?: Maybe<Scalars['String']>,
  lastName_not_ends_with?: Maybe<Scalars['String']>,
  CUI?: Maybe<Scalars['String']>,
  CUI_not?: Maybe<Scalars['String']>,
  CUI_in?: Maybe<Array<Scalars['String']>>,
  CUI_not_in?: Maybe<Array<Scalars['String']>>,
  CUI_lt?: Maybe<Scalars['String']>,
  CUI_lte?: Maybe<Scalars['String']>,
  CUI_gt?: Maybe<Scalars['String']>,
  CUI_gte?: Maybe<Scalars['String']>,
  CUI_contains?: Maybe<Scalars['String']>,
  CUI_not_contains?: Maybe<Scalars['String']>,
  CUI_starts_with?: Maybe<Scalars['String']>,
  CUI_not_starts_with?: Maybe<Scalars['String']>,
  CUI_ends_with?: Maybe<Scalars['String']>,
  CUI_not_ends_with?: Maybe<Scalars['String']>,
  dateOfBirth?: Maybe<Scalars['DateTime']>,
  dateOfBirth_not?: Maybe<Scalars['DateTime']>,
  dateOfBirth_in?: Maybe<Array<Scalars['DateTime']>>,
  dateOfBirth_not_in?: Maybe<Array<Scalars['DateTime']>>,
  dateOfBirth_lt?: Maybe<Scalars['DateTime']>,
  dateOfBirth_lte?: Maybe<Scalars['DateTime']>,
  dateOfBirth_gt?: Maybe<Scalars['DateTime']>,
  dateOfBirth_gte?: Maybe<Scalars['DateTime']>,
  genre?: Maybe<Genre>,
  genre_not?: Maybe<Genre>,
  genre_in?: Maybe<Array<Genre>>,
  genre_not_in?: Maybe<Array<Genre>>,
  expiresAt?: Maybe<Scalars['DateTime']>,
  expiresAt_not?: Maybe<Scalars['DateTime']>,
  expiresAt_in?: Maybe<Array<Scalars['DateTime']>>,
  expiresAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  expiresAt_lt?: Maybe<Scalars['DateTime']>,
  expiresAt_lte?: Maybe<Scalars['DateTime']>,
  expiresAt_gt?: Maybe<Scalars['DateTime']>,
  expiresAt_gte?: Maybe<Scalars['DateTime']>,
  isCurrent?: Maybe<Scalars['Boolean']>,
  isCurrent_not?: Maybe<Scalars['Boolean']>,
  governmentID?: Maybe<GovernmentIdWhereInput>,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  verifiedAt_not?: Maybe<Scalars['DateTime']>,
  verifiedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_lt?: Maybe<Scalars['DateTime']>,
  verifiedAt_lte?: Maybe<Scalars['DateTime']>,
  verifiedAt_gt?: Maybe<Scalars['DateTime']>,
  verifiedAt_gte?: Maybe<Scalars['DateTime']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<DpiWhereInput>>,
  OR?: Maybe<Array<DpiWhereInput>>,
  NOT?: Maybe<Array<DpiWhereInput>>,
};

export type Email = {
   __typename?: 'Email',
  id: Scalars['ID'],
  address: Scalars['String'],
  isCurrent?: Maybe<Scalars['Boolean']>,
  contact: Contact,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  createdAt: Scalars['DateTime'],
};

export enum EmailOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  IsCurrentAsc = 'isCurrent_ASC',
  IsCurrentDesc = 'isCurrent_DESC',
  VerifiedAtAsc = 'verifiedAt_ASC',
  VerifiedAtDesc = 'verifiedAt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC'
}

export type EmailWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  address?: Maybe<Scalars['String']>,
  address_not?: Maybe<Scalars['String']>,
  address_in?: Maybe<Array<Scalars['String']>>,
  address_not_in?: Maybe<Array<Scalars['String']>>,
  address_lt?: Maybe<Scalars['String']>,
  address_lte?: Maybe<Scalars['String']>,
  address_gt?: Maybe<Scalars['String']>,
  address_gte?: Maybe<Scalars['String']>,
  address_contains?: Maybe<Scalars['String']>,
  address_not_contains?: Maybe<Scalars['String']>,
  address_starts_with?: Maybe<Scalars['String']>,
  address_not_starts_with?: Maybe<Scalars['String']>,
  address_ends_with?: Maybe<Scalars['String']>,
  address_not_ends_with?: Maybe<Scalars['String']>,
  isCurrent?: Maybe<Scalars['Boolean']>,
  isCurrent_not?: Maybe<Scalars['Boolean']>,
  contact?: Maybe<ContactWhereInput>,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  verifiedAt_not?: Maybe<Scalars['DateTime']>,
  verifiedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_lt?: Maybe<Scalars['DateTime']>,
  verifiedAt_lte?: Maybe<Scalars['DateTime']>,
  verifiedAt_gt?: Maybe<Scalars['DateTime']>,
  verifiedAt_gte?: Maybe<Scalars['DateTime']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<EmailWhereInput>>,
  OR?: Maybe<Array<EmailWhereInput>>,
  NOT?: Maybe<Array<EmailWhereInput>>,
};

export enum Genre {
  Male = 'MALE',
  Female = 'FEMALE'
}

export type GovernmentId = {
   __typename?: 'GovernmentID',
  id: Scalars['ID'],
  dpi?: Maybe<Dpi>,
  profile: Profile,
};

export enum GovernmentIdOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type GovernmentIdWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  dpi?: Maybe<DpiWhereInput>,
  profile?: Maybe<ProfileWhereInput>,
  AND?: Maybe<Array<GovernmentIdWhereInput>>,
  OR?: Maybe<Array<GovernmentIdWhereInput>>,
  NOT?: Maybe<Array<GovernmentIdWhereInput>>,
};

export type Mutation = {
   __typename?: 'Mutation',
  authenticate: Session,
  sendEmailVerificationCode: Scalars['Boolean'],
  sendPhoneNumberVerificationCode: Scalars['Boolean'],
  verifyEmail: Session,
  verifyPhoneNumber: Session,
};


export type MutationAuthenticateArgs = {
  args: AuthenticateInput
};


export type MutationSendEmailVerificationCodeArgs = {
  args: SendEmailVerificationCodeInput
};


export type MutationSendPhoneNumberVerificationCodeArgs = {
  args: SendPhoneNumberVerificationCodeInput
};


export type MutationVerifyEmailArgs = {
  args: VerifyEmailInput
};


export type MutationVerifyPhoneNumberArgs = {
  args: VerifyPhoneNumberInput
};

export type PhoneNumber = {
   __typename?: 'PhoneNumber',
  id: Scalars['ID'],
  number: Scalars['String'],
  isCurrent?: Maybe<Scalars['Boolean']>,
  contact: Contact,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  createdAt: Scalars['DateTime'],
};

export enum PhoneNumberOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  IsCurrentAsc = 'isCurrent_ASC',
  IsCurrentDesc = 'isCurrent_DESC',
  VerifiedAtAsc = 'verifiedAt_ASC',
  VerifiedAtDesc = 'verifiedAt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC'
}

export type PhoneNumberWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  number?: Maybe<Scalars['String']>,
  number_not?: Maybe<Scalars['String']>,
  number_in?: Maybe<Array<Scalars['String']>>,
  number_not_in?: Maybe<Array<Scalars['String']>>,
  number_lt?: Maybe<Scalars['String']>,
  number_lte?: Maybe<Scalars['String']>,
  number_gt?: Maybe<Scalars['String']>,
  number_gte?: Maybe<Scalars['String']>,
  number_contains?: Maybe<Scalars['String']>,
  number_not_contains?: Maybe<Scalars['String']>,
  number_starts_with?: Maybe<Scalars['String']>,
  number_not_starts_with?: Maybe<Scalars['String']>,
  number_ends_with?: Maybe<Scalars['String']>,
  number_not_ends_with?: Maybe<Scalars['String']>,
  isCurrent?: Maybe<Scalars['Boolean']>,
  isCurrent_not?: Maybe<Scalars['Boolean']>,
  contact?: Maybe<ContactWhereInput>,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  verifiedAt_not?: Maybe<Scalars['DateTime']>,
  verifiedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_lt?: Maybe<Scalars['DateTime']>,
  verifiedAt_lte?: Maybe<Scalars['DateTime']>,
  verifiedAt_gt?: Maybe<Scalars['DateTime']>,
  verifiedAt_gte?: Maybe<Scalars['DateTime']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<PhoneNumberWhereInput>>,
  OR?: Maybe<Array<PhoneNumberWhereInput>>,
  NOT?: Maybe<Array<PhoneNumberWhereInput>>,
};

export type Profile = {
   __typename?: 'Profile',
  id: Scalars['ID'],
  governmentID?: Maybe<Array<GovernmentId>>,
  user: User,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};


export type ProfileGovernmentIdArgs = {
  where?: Maybe<GovernmentIdWhereInput>,
  orderBy?: Maybe<GovernmentIdOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type ProfileWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  governmentID_every?: Maybe<GovernmentIdWhereInput>,
  governmentID_some?: Maybe<GovernmentIdWhereInput>,
  governmentID_none?: Maybe<GovernmentIdWhereInput>,
  user?: Maybe<UserWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<ProfileWhereInput>>,
  OR?: Maybe<Array<ProfileWhereInput>>,
  NOT?: Maybe<Array<ProfileWhereInput>>,
};

export type Query = {
   __typename?: 'Query',
  user: User,
};

export type SendEmailVerificationCodeInput = {
  email: Scalars['String'],
};

export type SendPhoneNumberVerificationCodeInput = {
  number: Scalars['String'],
};

export type Session = {
   __typename?: 'Session',
  expiresAt?: Maybe<Scalars['DateTime']>,
  token?: Maybe<Scalars['String']>,
};

export type Transaction = {
   __typename?: 'Transaction',
  id: Scalars['ID'],
  amount: Scalars['String'],
  user: User,
  toCurrency: Currency,
  fromCurrency: Currency,
  bankAccount?: Maybe<BankAccount>,
  cryptoAccount?: Maybe<CryptoAccount>,
  adminBankAccount?: Maybe<AdminBankAccount>,
  transactionFee: TransactionFee,
  paidAt?: Maybe<Scalars['DateTime']>,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type TransactionFee = {
   __typename?: 'TransactionFee',
  id: Scalars['ID'],
  fee: Scalars['String'],
};

export type TransactionFeeWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  fee?: Maybe<Scalars['String']>,
  fee_not?: Maybe<Scalars['String']>,
  fee_in?: Maybe<Array<Scalars['String']>>,
  fee_not_in?: Maybe<Array<Scalars['String']>>,
  fee_lt?: Maybe<Scalars['String']>,
  fee_lte?: Maybe<Scalars['String']>,
  fee_gt?: Maybe<Scalars['String']>,
  fee_gte?: Maybe<Scalars['String']>,
  fee_contains?: Maybe<Scalars['String']>,
  fee_not_contains?: Maybe<Scalars['String']>,
  fee_starts_with?: Maybe<Scalars['String']>,
  fee_not_starts_with?: Maybe<Scalars['String']>,
  fee_ends_with?: Maybe<Scalars['String']>,
  fee_not_ends_with?: Maybe<Scalars['String']>,
  AND?: Maybe<Array<TransactionFeeWhereInput>>,
  OR?: Maybe<Array<TransactionFeeWhereInput>>,
  NOT?: Maybe<Array<TransactionFeeWhereInput>>,
};

export enum TransactionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  PaidAtAsc = 'paidAt_ASC',
  PaidAtDesc = 'paidAt_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type TransactionWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  amount?: Maybe<Scalars['String']>,
  amount_not?: Maybe<Scalars['String']>,
  amount_in?: Maybe<Array<Scalars['String']>>,
  amount_not_in?: Maybe<Array<Scalars['String']>>,
  amount_lt?: Maybe<Scalars['String']>,
  amount_lte?: Maybe<Scalars['String']>,
  amount_gt?: Maybe<Scalars['String']>,
  amount_gte?: Maybe<Scalars['String']>,
  amount_contains?: Maybe<Scalars['String']>,
  amount_not_contains?: Maybe<Scalars['String']>,
  amount_starts_with?: Maybe<Scalars['String']>,
  amount_not_starts_with?: Maybe<Scalars['String']>,
  amount_ends_with?: Maybe<Scalars['String']>,
  amount_not_ends_with?: Maybe<Scalars['String']>,
  user?: Maybe<UserWhereInput>,
  toCurrency?: Maybe<CurrencyWhereInput>,
  fromCurrency?: Maybe<CurrencyWhereInput>,
  bankAccount?: Maybe<BankAccountWhereInput>,
  cryptoAccount?: Maybe<CryptoAccountWhereInput>,
  adminBankAccount?: Maybe<AdminBankAccountWhereInput>,
  transactionFee?: Maybe<TransactionFeeWhereInput>,
  paidAt?: Maybe<Scalars['DateTime']>,
  paidAt_not?: Maybe<Scalars['DateTime']>,
  paidAt_in?: Maybe<Array<Scalars['DateTime']>>,
  paidAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  paidAt_lt?: Maybe<Scalars['DateTime']>,
  paidAt_lte?: Maybe<Scalars['DateTime']>,
  paidAt_gt?: Maybe<Scalars['DateTime']>,
  paidAt_gte?: Maybe<Scalars['DateTime']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<TransactionWhereInput>>,
  OR?: Maybe<Array<TransactionWhereInput>>,
  NOT?: Maybe<Array<TransactionWhereInput>>,
};

export enum TUserRole {
  Admin = 'ADMIN',
  User = 'USER'
}


export type User = {
   __typename?: 'User',
  account?: Maybe<Account>,
  bankAccount?: Maybe<Array<BankAccount>>,
  contact: Contact,
  cryptoAccount?: Maybe<Array<CryptoAccount>>,
  id: Scalars['ID'],
  profile?: Maybe<Profile>,
  role: UserRole,
  transactions?: Maybe<Array<Transaction>>,
};


export type UserBankAccountArgs = {
  where?: Maybe<BankAccountWhereInput>,
  orderBy?: Maybe<BankAccountOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserCryptoAccountArgs = {
  where?: Maybe<CryptoAccountWhereInput>,
  orderBy?: Maybe<CryptoAccountOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserTransactionsArgs = {
  where?: Maybe<TransactionWhereInput>,
  orderBy?: Maybe<TransactionOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type UserRole = {
   __typename?: 'UserRole',
  id: Scalars['ID'],
  type: TUserRole,
};

export type UserRoleWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  type?: Maybe<TUserRole>,
  type_not?: Maybe<TUserRole>,
  type_in?: Maybe<Array<TUserRole>>,
  type_not_in?: Maybe<Array<TUserRole>>,
  AND?: Maybe<Array<UserRoleWhereInput>>,
  OR?: Maybe<Array<UserRoleWhereInput>>,
  NOT?: Maybe<Array<UserRoleWhereInput>>,
};

export type UserWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  role?: Maybe<UserRoleWhereInput>,
  contact?: Maybe<ContactWhereInput>,
  account?: Maybe<AccountWhereInput>,
  profile?: Maybe<ProfileWhereInput>,
  bankAccount_every?: Maybe<BankAccountWhereInput>,
  bankAccount_some?: Maybe<BankAccountWhereInput>,
  bankAccount_none?: Maybe<BankAccountWhereInput>,
  cryptoAccount_every?: Maybe<CryptoAccountWhereInput>,
  cryptoAccount_some?: Maybe<CryptoAccountWhereInput>,
  cryptoAccount_none?: Maybe<CryptoAccountWhereInput>,
  transactions_every?: Maybe<TransactionWhereInput>,
  transactions_some?: Maybe<TransactionWhereInput>,
  transactions_none?: Maybe<TransactionWhereInput>,
  AND?: Maybe<Array<UserWhereInput>>,
  OR?: Maybe<Array<UserWhereInput>>,
  NOT?: Maybe<Array<UserWhereInput>>,
};

export type VerifyEmailInput = {
  code: Scalars['String'],
  email: Scalars['String'],
};

export type VerifyPhoneNumberInput = {
  code: Scalars['String'],
  number: Scalars['String'],
};
