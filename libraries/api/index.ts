export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  DateTime: any,
  Upload: any,
};

export type Account = {
   __typename?: 'Account',
  id: Scalars['ID'],
  username: Scalars['String'],
  password: Scalars['String'],
  fullName?: Maybe<Scalars['String']>,
  profilePicture?: Maybe<ProfilePicture>,
  bankAccountProvider?: Maybe<BankAccountProvider>,
  user?: Maybe<User>,
  signupCompletedAt?: Maybe<Scalars['DateTime']>,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type AccountWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  username?: Maybe<Scalars['String']>,
  username_not?: Maybe<Scalars['String']>,
  username_in?: Maybe<Array<Scalars['String']>>,
  username_not_in?: Maybe<Array<Scalars['String']>>,
  username_lt?: Maybe<Scalars['String']>,
  username_lte?: Maybe<Scalars['String']>,
  username_gt?: Maybe<Scalars['String']>,
  username_gte?: Maybe<Scalars['String']>,
  username_contains?: Maybe<Scalars['String']>,
  username_not_contains?: Maybe<Scalars['String']>,
  username_starts_with?: Maybe<Scalars['String']>,
  username_not_starts_with?: Maybe<Scalars['String']>,
  username_ends_with?: Maybe<Scalars['String']>,
  username_not_ends_with?: Maybe<Scalars['String']>,
  password?: Maybe<Scalars['String']>,
  password_not?: Maybe<Scalars['String']>,
  password_in?: Maybe<Array<Scalars['String']>>,
  password_not_in?: Maybe<Array<Scalars['String']>>,
  password_lt?: Maybe<Scalars['String']>,
  password_lte?: Maybe<Scalars['String']>,
  password_gt?: Maybe<Scalars['String']>,
  password_gte?: Maybe<Scalars['String']>,
  password_contains?: Maybe<Scalars['String']>,
  password_not_contains?: Maybe<Scalars['String']>,
  password_starts_with?: Maybe<Scalars['String']>,
  password_not_starts_with?: Maybe<Scalars['String']>,
  password_ends_with?: Maybe<Scalars['String']>,
  password_not_ends_with?: Maybe<Scalars['String']>,
  fullName?: Maybe<Scalars['String']>,
  fullName_not?: Maybe<Scalars['String']>,
  fullName_in?: Maybe<Array<Scalars['String']>>,
  fullName_not_in?: Maybe<Array<Scalars['String']>>,
  fullName_lt?: Maybe<Scalars['String']>,
  fullName_lte?: Maybe<Scalars['String']>,
  fullName_gt?: Maybe<Scalars['String']>,
  fullName_gte?: Maybe<Scalars['String']>,
  fullName_contains?: Maybe<Scalars['String']>,
  fullName_not_contains?: Maybe<Scalars['String']>,
  fullName_starts_with?: Maybe<Scalars['String']>,
  fullName_not_starts_with?: Maybe<Scalars['String']>,
  fullName_ends_with?: Maybe<Scalars['String']>,
  fullName_not_ends_with?: Maybe<Scalars['String']>,
  profilePicture?: Maybe<ProfilePictureWhereInput>,
  bankAccountProvider?: Maybe<BankAccountProviderWhereInput>,
  user?: Maybe<UserWhereInput>,
  signupCompletedAt?: Maybe<Scalars['DateTime']>,
  signupCompletedAt_not?: Maybe<Scalars['DateTime']>,
  signupCompletedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  signupCompletedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  signupCompletedAt_lt?: Maybe<Scalars['DateTime']>,
  signupCompletedAt_lte?: Maybe<Scalars['DateTime']>,
  signupCompletedAt_gt?: Maybe<Scalars['DateTime']>,
  signupCompletedAt_gte?: Maybe<Scalars['DateTime']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<AccountWhereInput>>,
  OR?: Maybe<Array<AccountWhereInput>>,
  NOT?: Maybe<Array<AccountWhereInput>>,
};

export type BankAccountProvider = {
   __typename?: 'BankAccountProvider',
  id: Scalars['ID'],
  dapiConnect?: Maybe<DapiConnect>,
  account: Account,
};

export type BankAccountProviderWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  dapiConnect?: Maybe<DapiConnectWhereInput>,
  account?: Maybe<AccountWhereInput>,
  AND?: Maybe<Array<BankAccountProviderWhereInput>>,
  OR?: Maybe<Array<BankAccountProviderWhereInput>>,
  NOT?: Maybe<Array<BankAccountProviderWhereInput>>,
};

export type BeneficiaryRequest = {
   __typename?: 'BeneficiaryRequest',
  id: Scalars['ID'],
  sender: User,
  recipient: User,
  status: BeneficiaryStatus,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export enum BeneficiaryRequestOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type BeneficiaryRequestWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  sender?: Maybe<UserWhereInput>,
  recipient?: Maybe<UserWhereInput>,
  status?: Maybe<BeneficiaryStatus>,
  status_not?: Maybe<BeneficiaryStatus>,
  status_in?: Maybe<Array<BeneficiaryStatus>>,
  status_not_in?: Maybe<Array<BeneficiaryStatus>>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<BeneficiaryRequestWhereInput>>,
  OR?: Maybe<Array<BeneficiaryRequestWhereInput>>,
  NOT?: Maybe<Array<BeneficiaryRequestWhereInput>>,
};

export enum BeneficiaryStatus {
  Initiated = 'INITIATED',
  Completed = 'COMPLETED',
  Rejected = 'REJECTED'
}

export type ConnectDapiAccountParams = {
  accessCode: Scalars['String'],
  connectionID: Scalars['String'],
  swiftCode: Scalars['String'],
  userSecret: Scalars['String'],
};

export type ConnectDapiAccountResponse = {
   __typename?: 'ConnectDapiAccountResponse',
  accessToken?: Maybe<Scalars['String']>,
};

export type Contact = {
   __typename?: 'Contact',
  id: Scalars['ID'],
  phoneNumber: PhoneNumber,
  user?: Maybe<User>,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type ContactWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  phoneNumber?: Maybe<PhoneNumberWhereInput>,
  user?: Maybe<UserWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<ContactWhereInput>>,
  OR?: Maybe<Array<ContactWhereInput>>,
  NOT?: Maybe<Array<ContactWhereInput>>,
};

export type Currency = {
   __typename?: 'Currency',
  id: Scalars['ID'],
  name: Scalars['String'],
  symbol: Scalars['String'],
  createdAt: Scalars['DateTime'],
};

export type CurrencyWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  name?: Maybe<Scalars['String']>,
  name_not?: Maybe<Scalars['String']>,
  name_in?: Maybe<Array<Scalars['String']>>,
  name_not_in?: Maybe<Array<Scalars['String']>>,
  name_lt?: Maybe<Scalars['String']>,
  name_lte?: Maybe<Scalars['String']>,
  name_gt?: Maybe<Scalars['String']>,
  name_gte?: Maybe<Scalars['String']>,
  name_contains?: Maybe<Scalars['String']>,
  name_not_contains?: Maybe<Scalars['String']>,
  name_starts_with?: Maybe<Scalars['String']>,
  name_not_starts_with?: Maybe<Scalars['String']>,
  name_ends_with?: Maybe<Scalars['String']>,
  name_not_ends_with?: Maybe<Scalars['String']>,
  symbol?: Maybe<Scalars['String']>,
  symbol_not?: Maybe<Scalars['String']>,
  symbol_in?: Maybe<Array<Scalars['String']>>,
  symbol_not_in?: Maybe<Array<Scalars['String']>>,
  symbol_lt?: Maybe<Scalars['String']>,
  symbol_lte?: Maybe<Scalars['String']>,
  symbol_gt?: Maybe<Scalars['String']>,
  symbol_gte?: Maybe<Scalars['String']>,
  symbol_contains?: Maybe<Scalars['String']>,
  symbol_not_contains?: Maybe<Scalars['String']>,
  symbol_starts_with?: Maybe<Scalars['String']>,
  symbol_not_starts_with?: Maybe<Scalars['String']>,
  symbol_ends_with?: Maybe<Scalars['String']>,
  symbol_not_ends_with?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<CurrencyWhereInput>>,
  OR?: Maybe<Array<CurrencyWhereInput>>,
  NOT?: Maybe<Array<CurrencyWhereInput>>,
};

export type DapiAccount = {
   __typename?: 'DapiAccount',
  id: Scalars['ID'],
  accountID: Scalars['String'],
  accountNumber: Scalars['String'],
  accountType: Scalars['String'],
  iban: Scalars['String'],
  currency: Currency,
  dapiConnect: DapiConnect,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type DapiAccountInput = {
  accountNumber: Scalars['String'],
  accountType: Scalars['String'],
  currency: Scalars['String'],
  iban: Scalars['String'],
  id: Scalars['String'],
  name: Scalars['String'],
};

export type DapiAccountResponse = {
   __typename?: 'DapiAccountResponse',
  accountNumber: Scalars['String'],
  accountType: Scalars['String'],
  currency: Scalars['String'],
  iban: Scalars['String'],
  id: Scalars['String'],
  name: Scalars['String'],
};

export type DapiAccountWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  accountID?: Maybe<Scalars['String']>,
  accountID_not?: Maybe<Scalars['String']>,
  accountID_in?: Maybe<Array<Scalars['String']>>,
  accountID_not_in?: Maybe<Array<Scalars['String']>>,
  accountID_lt?: Maybe<Scalars['String']>,
  accountID_lte?: Maybe<Scalars['String']>,
  accountID_gt?: Maybe<Scalars['String']>,
  accountID_gte?: Maybe<Scalars['String']>,
  accountID_contains?: Maybe<Scalars['String']>,
  accountID_not_contains?: Maybe<Scalars['String']>,
  accountID_starts_with?: Maybe<Scalars['String']>,
  accountID_not_starts_with?: Maybe<Scalars['String']>,
  accountID_ends_with?: Maybe<Scalars['String']>,
  accountID_not_ends_with?: Maybe<Scalars['String']>,
  accountNumber?: Maybe<Scalars['String']>,
  accountNumber_not?: Maybe<Scalars['String']>,
  accountNumber_in?: Maybe<Array<Scalars['String']>>,
  accountNumber_not_in?: Maybe<Array<Scalars['String']>>,
  accountNumber_lt?: Maybe<Scalars['String']>,
  accountNumber_lte?: Maybe<Scalars['String']>,
  accountNumber_gt?: Maybe<Scalars['String']>,
  accountNumber_gte?: Maybe<Scalars['String']>,
  accountNumber_contains?: Maybe<Scalars['String']>,
  accountNumber_not_contains?: Maybe<Scalars['String']>,
  accountNumber_starts_with?: Maybe<Scalars['String']>,
  accountNumber_not_starts_with?: Maybe<Scalars['String']>,
  accountNumber_ends_with?: Maybe<Scalars['String']>,
  accountNumber_not_ends_with?: Maybe<Scalars['String']>,
  accountType?: Maybe<Scalars['String']>,
  accountType_not?: Maybe<Scalars['String']>,
  accountType_in?: Maybe<Array<Scalars['String']>>,
  accountType_not_in?: Maybe<Array<Scalars['String']>>,
  accountType_lt?: Maybe<Scalars['String']>,
  accountType_lte?: Maybe<Scalars['String']>,
  accountType_gt?: Maybe<Scalars['String']>,
  accountType_gte?: Maybe<Scalars['String']>,
  accountType_contains?: Maybe<Scalars['String']>,
  accountType_not_contains?: Maybe<Scalars['String']>,
  accountType_starts_with?: Maybe<Scalars['String']>,
  accountType_not_starts_with?: Maybe<Scalars['String']>,
  accountType_ends_with?: Maybe<Scalars['String']>,
  accountType_not_ends_with?: Maybe<Scalars['String']>,
  iban?: Maybe<Scalars['String']>,
  iban_not?: Maybe<Scalars['String']>,
  iban_in?: Maybe<Array<Scalars['String']>>,
  iban_not_in?: Maybe<Array<Scalars['String']>>,
  iban_lt?: Maybe<Scalars['String']>,
  iban_lte?: Maybe<Scalars['String']>,
  iban_gt?: Maybe<Scalars['String']>,
  iban_gte?: Maybe<Scalars['String']>,
  iban_contains?: Maybe<Scalars['String']>,
  iban_not_contains?: Maybe<Scalars['String']>,
  iban_starts_with?: Maybe<Scalars['String']>,
  iban_not_starts_with?: Maybe<Scalars['String']>,
  iban_ends_with?: Maybe<Scalars['String']>,
  iban_not_ends_with?: Maybe<Scalars['String']>,
  currency?: Maybe<CurrencyWhereInput>,
  dapiConnect?: Maybe<DapiConnectWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<DapiAccountWhereInput>>,
  OR?: Maybe<Array<DapiAccountWhereInput>>,
  NOT?: Maybe<Array<DapiAccountWhereInput>>,
};

export type DapiAddress = {
   __typename?: 'DapiAddress',
  id: Scalars['ID'],
  line1?: Maybe<Scalars['String']>,
  line2?: Maybe<Scalars['String']>,
  line3?: Maybe<Scalars['String']>,
  dapiConnect: DapiConnect,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type DapiAddressWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  line1?: Maybe<Scalars['String']>,
  line1_not?: Maybe<Scalars['String']>,
  line1_in?: Maybe<Array<Scalars['String']>>,
  line1_not_in?: Maybe<Array<Scalars['String']>>,
  line1_lt?: Maybe<Scalars['String']>,
  line1_lte?: Maybe<Scalars['String']>,
  line1_gt?: Maybe<Scalars['String']>,
  line1_gte?: Maybe<Scalars['String']>,
  line1_contains?: Maybe<Scalars['String']>,
  line1_not_contains?: Maybe<Scalars['String']>,
  line1_starts_with?: Maybe<Scalars['String']>,
  line1_not_starts_with?: Maybe<Scalars['String']>,
  line1_ends_with?: Maybe<Scalars['String']>,
  line1_not_ends_with?: Maybe<Scalars['String']>,
  line2?: Maybe<Scalars['String']>,
  line2_not?: Maybe<Scalars['String']>,
  line2_in?: Maybe<Array<Scalars['String']>>,
  line2_not_in?: Maybe<Array<Scalars['String']>>,
  line2_lt?: Maybe<Scalars['String']>,
  line2_lte?: Maybe<Scalars['String']>,
  line2_gt?: Maybe<Scalars['String']>,
  line2_gte?: Maybe<Scalars['String']>,
  line2_contains?: Maybe<Scalars['String']>,
  line2_not_contains?: Maybe<Scalars['String']>,
  line2_starts_with?: Maybe<Scalars['String']>,
  line2_not_starts_with?: Maybe<Scalars['String']>,
  line2_ends_with?: Maybe<Scalars['String']>,
  line2_not_ends_with?: Maybe<Scalars['String']>,
  line3?: Maybe<Scalars['String']>,
  line3_not?: Maybe<Scalars['String']>,
  line3_in?: Maybe<Array<Scalars['String']>>,
  line3_not_in?: Maybe<Array<Scalars['String']>>,
  line3_lt?: Maybe<Scalars['String']>,
  line3_lte?: Maybe<Scalars['String']>,
  line3_gt?: Maybe<Scalars['String']>,
  line3_gte?: Maybe<Scalars['String']>,
  line3_contains?: Maybe<Scalars['String']>,
  line3_not_contains?: Maybe<Scalars['String']>,
  line3_starts_with?: Maybe<Scalars['String']>,
  line3_not_starts_with?: Maybe<Scalars['String']>,
  line3_ends_with?: Maybe<Scalars['String']>,
  line3_not_ends_with?: Maybe<Scalars['String']>,
  dapiConnect?: Maybe<DapiConnectWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<DapiAddressWhereInput>>,
  OR?: Maybe<Array<DapiAddressWhereInput>>,
  NOT?: Maybe<Array<DapiAddressWhereInput>>,
};

export type DapiAuthRequestParams = {
  accessToken: Scalars['String'],
  userSecret: Scalars['String'],
};

export type DapiBank = {
   __typename?: 'DapiBank',
  id: Scalars['ID'],
  swiftCode: Scalars['String'],
  sortCode: Scalars['String'],
  country: Scalars['String'],
  bankName: Scalars['String'],
  branchName: Scalars['String'],
  branchAddress: Scalars['String'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type DapiBankWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  swiftCode?: Maybe<Scalars['String']>,
  swiftCode_not?: Maybe<Scalars['String']>,
  swiftCode_in?: Maybe<Array<Scalars['String']>>,
  swiftCode_not_in?: Maybe<Array<Scalars['String']>>,
  swiftCode_lt?: Maybe<Scalars['String']>,
  swiftCode_lte?: Maybe<Scalars['String']>,
  swiftCode_gt?: Maybe<Scalars['String']>,
  swiftCode_gte?: Maybe<Scalars['String']>,
  swiftCode_contains?: Maybe<Scalars['String']>,
  swiftCode_not_contains?: Maybe<Scalars['String']>,
  swiftCode_starts_with?: Maybe<Scalars['String']>,
  swiftCode_not_starts_with?: Maybe<Scalars['String']>,
  swiftCode_ends_with?: Maybe<Scalars['String']>,
  swiftCode_not_ends_with?: Maybe<Scalars['String']>,
  sortCode?: Maybe<Scalars['String']>,
  sortCode_not?: Maybe<Scalars['String']>,
  sortCode_in?: Maybe<Array<Scalars['String']>>,
  sortCode_not_in?: Maybe<Array<Scalars['String']>>,
  sortCode_lt?: Maybe<Scalars['String']>,
  sortCode_lte?: Maybe<Scalars['String']>,
  sortCode_gt?: Maybe<Scalars['String']>,
  sortCode_gte?: Maybe<Scalars['String']>,
  sortCode_contains?: Maybe<Scalars['String']>,
  sortCode_not_contains?: Maybe<Scalars['String']>,
  sortCode_starts_with?: Maybe<Scalars['String']>,
  sortCode_not_starts_with?: Maybe<Scalars['String']>,
  sortCode_ends_with?: Maybe<Scalars['String']>,
  sortCode_not_ends_with?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  country_not?: Maybe<Scalars['String']>,
  country_in?: Maybe<Array<Scalars['String']>>,
  country_not_in?: Maybe<Array<Scalars['String']>>,
  country_lt?: Maybe<Scalars['String']>,
  country_lte?: Maybe<Scalars['String']>,
  country_gt?: Maybe<Scalars['String']>,
  country_gte?: Maybe<Scalars['String']>,
  country_contains?: Maybe<Scalars['String']>,
  country_not_contains?: Maybe<Scalars['String']>,
  country_starts_with?: Maybe<Scalars['String']>,
  country_not_starts_with?: Maybe<Scalars['String']>,
  country_ends_with?: Maybe<Scalars['String']>,
  country_not_ends_with?: Maybe<Scalars['String']>,
  bankName?: Maybe<Scalars['String']>,
  bankName_not?: Maybe<Scalars['String']>,
  bankName_in?: Maybe<Array<Scalars['String']>>,
  bankName_not_in?: Maybe<Array<Scalars['String']>>,
  bankName_lt?: Maybe<Scalars['String']>,
  bankName_lte?: Maybe<Scalars['String']>,
  bankName_gt?: Maybe<Scalars['String']>,
  bankName_gte?: Maybe<Scalars['String']>,
  bankName_contains?: Maybe<Scalars['String']>,
  bankName_not_contains?: Maybe<Scalars['String']>,
  bankName_starts_with?: Maybe<Scalars['String']>,
  bankName_not_starts_with?: Maybe<Scalars['String']>,
  bankName_ends_with?: Maybe<Scalars['String']>,
  bankName_not_ends_with?: Maybe<Scalars['String']>,
  branchName?: Maybe<Scalars['String']>,
  branchName_not?: Maybe<Scalars['String']>,
  branchName_in?: Maybe<Array<Scalars['String']>>,
  branchName_not_in?: Maybe<Array<Scalars['String']>>,
  branchName_lt?: Maybe<Scalars['String']>,
  branchName_lte?: Maybe<Scalars['String']>,
  branchName_gt?: Maybe<Scalars['String']>,
  branchName_gte?: Maybe<Scalars['String']>,
  branchName_contains?: Maybe<Scalars['String']>,
  branchName_not_contains?: Maybe<Scalars['String']>,
  branchName_starts_with?: Maybe<Scalars['String']>,
  branchName_not_starts_with?: Maybe<Scalars['String']>,
  branchName_ends_with?: Maybe<Scalars['String']>,
  branchName_not_ends_with?: Maybe<Scalars['String']>,
  branchAddress?: Maybe<Scalars['String']>,
  branchAddress_not?: Maybe<Scalars['String']>,
  branchAddress_in?: Maybe<Array<Scalars['String']>>,
  branchAddress_not_in?: Maybe<Array<Scalars['String']>>,
  branchAddress_lt?: Maybe<Scalars['String']>,
  branchAddress_lte?: Maybe<Scalars['String']>,
  branchAddress_gt?: Maybe<Scalars['String']>,
  branchAddress_gte?: Maybe<Scalars['String']>,
  branchAddress_contains?: Maybe<Scalars['String']>,
  branchAddress_not_contains?: Maybe<Scalars['String']>,
  branchAddress_starts_with?: Maybe<Scalars['String']>,
  branchAddress_not_starts_with?: Maybe<Scalars['String']>,
  branchAddress_ends_with?: Maybe<Scalars['String']>,
  branchAddress_not_ends_with?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<DapiBankWhereInput>>,
  OR?: Maybe<Array<DapiBankWhereInput>>,
  NOT?: Maybe<Array<DapiBankWhereInput>>,
};

export type DapiConnect = {
   __typename?: 'DapiConnect',
  id: Scalars['ID'],
  dapiAccount?: Maybe<DapiAccount>,
  dapiAddress?: Maybe<DapiAddress>,
  dapiBank: DapiBank,
  bankAccountProvider: BankAccountProvider,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type DapiConnectWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  dapiAccount?: Maybe<DapiAccountWhereInput>,
  dapiAddress?: Maybe<DapiAddressWhereInput>,
  dapiBank?: Maybe<DapiBankWhereInput>,
  bankAccountProvider?: Maybe<BankAccountProviderWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<DapiConnectWhereInput>>,
  OR?: Maybe<Array<DapiConnectWhereInput>>,
  NOT?: Maybe<Array<DapiConnectWhereInput>>,
};

export type DapiGetAccountsResponse = {
   __typename?: 'DapiGetAccountsResponse',
  accounts: Array<Maybe<DapiAccountResponse>>,
};

export type DapiGetAccountsResponseOrUserInputRequest = DapiGetAccountsResponse | UserInputRequest;

export type DapiPaymentRequestParams = {
  amount: Scalars['Int'],
  beneficiaryUserID: Scalars['String'],
  currency: Scalars['String'],
  message: Scalars['String'],
};

export type DapiResumeParams = {
  jobID: Scalars['String'],
  responses: Array<Maybe<UserInputResponse>>,
};


export type Mutation = {
   __typename?: 'Mutation',
  authenticate: Session,
  connectDapiAccount: ConnectDapiAccountResponse,
  createUser: Session,
  initiatePayment: PaymentResponse,
  resumePayment: PaymentResponse,
  sendVerificationCode: Scalars['Boolean'],
  setAddress?: Maybe<SetAddressResponseOrUserInputRequest>,
  setBankAccount: Scalars['Boolean'],
  setFullName: Scalars['Boolean'],
  setProfilePicture: Scalars['String'],
  updatePayment: PaymentResponse,
  verifyPhoneNumber: Scalars['String'],
};


export type MutationAuthenticateArgs = {
  username: Scalars['String'],
  password: Scalars['String']
};


export type MutationConnectDapiAccountArgs = {
  params: ConnectDapiAccountParams
};


export type MutationCreateUserArgs = {
  username: Scalars['String'],
  password: Scalars['String'],
  contactID: Scalars['String']
};


export type MutationInitiatePaymentArgs = {
  params: DapiPaymentRequestParams,
  authParams: DapiAuthRequestParams
};


export type MutationResumePaymentArgs = {
  transactionID: Scalars['String'],
  authParams: DapiAuthRequestParams,
  resumeParams?: Maybe<DapiResumeParams>
};


export type MutationSendVerificationCodeArgs = {
  number: Scalars['String']
};


export type MutationSetAddressArgs = {
  authParams: DapiAuthRequestParams,
  resumeParams?: Maybe<DapiResumeParams>
};


export type MutationSetBankAccountArgs = {
  account: DapiAccountInput
};


export type MutationSetFullNameArgs = {
  fullName: Scalars['String']
};


export type MutationSetProfilePictureArgs = {
  image: Scalars['Upload']
};


export type MutationUpdatePaymentArgs = {
  transactionID: Scalars['String'],
  authParams: DapiAuthRequestParams,
  resumeParams?: Maybe<DapiResumeParams>
};


export type MutationVerifyPhoneNumberArgs = {
  number: Scalars['String'],
  code: Scalars['String']
};

export type PaymentResponse = {
   __typename?: 'PaymentResponse',
  transaction: TransactionResponse,
  userInputRequest?: Maybe<UserInputRequest>,
};

export type PhoneNumber = {
   __typename?: 'PhoneNumber',
  id: Scalars['ID'],
  number: Scalars['String'],
  verifiedAt?: Maybe<Scalars['DateTime']>,
  contact: Contact,
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type PhoneNumberWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  number?: Maybe<Scalars['String']>,
  number_not?: Maybe<Scalars['String']>,
  number_in?: Maybe<Array<Scalars['String']>>,
  number_not_in?: Maybe<Array<Scalars['String']>>,
  number_lt?: Maybe<Scalars['String']>,
  number_lte?: Maybe<Scalars['String']>,
  number_gt?: Maybe<Scalars['String']>,
  number_gte?: Maybe<Scalars['String']>,
  number_contains?: Maybe<Scalars['String']>,
  number_not_contains?: Maybe<Scalars['String']>,
  number_starts_with?: Maybe<Scalars['String']>,
  number_not_starts_with?: Maybe<Scalars['String']>,
  number_ends_with?: Maybe<Scalars['String']>,
  number_not_ends_with?: Maybe<Scalars['String']>,
  verifiedAt?: Maybe<Scalars['DateTime']>,
  verifiedAt_not?: Maybe<Scalars['DateTime']>,
  verifiedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  verifiedAt_lt?: Maybe<Scalars['DateTime']>,
  verifiedAt_lte?: Maybe<Scalars['DateTime']>,
  verifiedAt_gt?: Maybe<Scalars['DateTime']>,
  verifiedAt_gte?: Maybe<Scalars['DateTime']>,
  contact?: Maybe<ContactWhereInput>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<PhoneNumberWhereInput>>,
  OR?: Maybe<Array<PhoneNumberWhereInput>>,
  NOT?: Maybe<Array<PhoneNumberWhereInput>>,
};

export type ProfilePicture = {
   __typename?: 'ProfilePicture',
  id: Scalars['ID'],
  account: Account,
  url: Scalars['String'],
  filename: Scalars['String'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export type ProfilePictureWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  account?: Maybe<AccountWhereInput>,
  url?: Maybe<Scalars['String']>,
  url_not?: Maybe<Scalars['String']>,
  url_in?: Maybe<Array<Scalars['String']>>,
  url_not_in?: Maybe<Array<Scalars['String']>>,
  url_lt?: Maybe<Scalars['String']>,
  url_lte?: Maybe<Scalars['String']>,
  url_gt?: Maybe<Scalars['String']>,
  url_gte?: Maybe<Scalars['String']>,
  url_contains?: Maybe<Scalars['String']>,
  url_not_contains?: Maybe<Scalars['String']>,
  url_starts_with?: Maybe<Scalars['String']>,
  url_not_starts_with?: Maybe<Scalars['String']>,
  url_ends_with?: Maybe<Scalars['String']>,
  url_not_ends_with?: Maybe<Scalars['String']>,
  filename?: Maybe<Scalars['String']>,
  filename_not?: Maybe<Scalars['String']>,
  filename_in?: Maybe<Array<Scalars['String']>>,
  filename_not_in?: Maybe<Array<Scalars['String']>>,
  filename_lt?: Maybe<Scalars['String']>,
  filename_lte?: Maybe<Scalars['String']>,
  filename_gt?: Maybe<Scalars['String']>,
  filename_gte?: Maybe<Scalars['String']>,
  filename_contains?: Maybe<Scalars['String']>,
  filename_not_contains?: Maybe<Scalars['String']>,
  filename_starts_with?: Maybe<Scalars['String']>,
  filename_not_starts_with?: Maybe<Scalars['String']>,
  filename_ends_with?: Maybe<Scalars['String']>,
  filename_not_ends_with?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<ProfilePictureWhereInput>>,
  OR?: Maybe<Array<ProfilePictureWhereInput>>,
  NOT?: Maybe<Array<ProfilePictureWhereInput>>,
};

export type Query = {
   __typename?: 'Query',
  getBankAccounts: DapiGetAccountsResponseOrUserInputRequest,
  user: User,
};


export type QueryGetBankAccountsArgs = {
  authParams: DapiAuthRequestParams,
  resumeParams?: Maybe<DapiResumeParams>
};

export type Session = {
   __typename?: 'Session',
  expiresAt?: Maybe<Scalars['DateTime']>,
  token?: Maybe<Scalars['String']>,
};

export type SetAddressResponse = {
   __typename?: 'SetAddressResponse',
  success: Scalars['Boolean'],
};

export type SetAddressResponseOrUserInputRequest = SetAddressResponse | UserInputRequest;

export type Transaction = {
   __typename?: 'Transaction',
  id: Scalars['ID'],
  status: TransactionStatus,
  sender?: Maybe<User>,
  recipient?: Maybe<User>,
  beneficiaryID?: Maybe<Scalars['String']>,
  amount: Scalars['Int'],
  currency: Currency,
  message: Scalars['String'],
  isPrivate: Scalars['Boolean'],
  createdAt: Scalars['DateTime'],
  updatedAt: Scalars['DateTime'],
};

export enum TransactionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  BeneficiaryIdAsc = 'beneficiaryID_ASC',
  BeneficiaryIdDesc = 'beneficiaryID_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  MessageAsc = 'message_ASC',
  MessageDesc = 'message_DESC',
  IsPrivateAsc = 'isPrivate_ASC',
  IsPrivateDesc = 'isPrivate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type TransactionResponse = {
   __typename?: 'TransactionResponse',
  id: Scalars['String'],
  status: TransactionStatus,
};

export enum TransactionStatus {
  CheckingBeneficiary = 'CHECKING_BENEFICIARY',
  AddBeneficiary = 'ADD_BENEFICIARY',
  PendingBeneficiary = 'PENDING_BENEFICIARY',
  CreatePayment = 'CREATE_PAYMENT',
  Paid = 'PAID',
  Failed = 'FAILED'
}

export type TransactionWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  status?: Maybe<TransactionStatus>,
  status_not?: Maybe<TransactionStatus>,
  status_in?: Maybe<Array<TransactionStatus>>,
  status_not_in?: Maybe<Array<TransactionStatus>>,
  sender?: Maybe<UserWhereInput>,
  recipient?: Maybe<UserWhereInput>,
  beneficiaryID?: Maybe<Scalars['String']>,
  beneficiaryID_not?: Maybe<Scalars['String']>,
  beneficiaryID_in?: Maybe<Array<Scalars['String']>>,
  beneficiaryID_not_in?: Maybe<Array<Scalars['String']>>,
  beneficiaryID_lt?: Maybe<Scalars['String']>,
  beneficiaryID_lte?: Maybe<Scalars['String']>,
  beneficiaryID_gt?: Maybe<Scalars['String']>,
  beneficiaryID_gte?: Maybe<Scalars['String']>,
  beneficiaryID_contains?: Maybe<Scalars['String']>,
  beneficiaryID_not_contains?: Maybe<Scalars['String']>,
  beneficiaryID_starts_with?: Maybe<Scalars['String']>,
  beneficiaryID_not_starts_with?: Maybe<Scalars['String']>,
  beneficiaryID_ends_with?: Maybe<Scalars['String']>,
  beneficiaryID_not_ends_with?: Maybe<Scalars['String']>,
  amount?: Maybe<Scalars['Int']>,
  amount_not?: Maybe<Scalars['Int']>,
  amount_in?: Maybe<Array<Scalars['Int']>>,
  amount_not_in?: Maybe<Array<Scalars['Int']>>,
  amount_lt?: Maybe<Scalars['Int']>,
  amount_lte?: Maybe<Scalars['Int']>,
  amount_gt?: Maybe<Scalars['Int']>,
  amount_gte?: Maybe<Scalars['Int']>,
  currency?: Maybe<CurrencyWhereInput>,
  message?: Maybe<Scalars['String']>,
  message_not?: Maybe<Scalars['String']>,
  message_in?: Maybe<Array<Scalars['String']>>,
  message_not_in?: Maybe<Array<Scalars['String']>>,
  message_lt?: Maybe<Scalars['String']>,
  message_lte?: Maybe<Scalars['String']>,
  message_gt?: Maybe<Scalars['String']>,
  message_gte?: Maybe<Scalars['String']>,
  message_contains?: Maybe<Scalars['String']>,
  message_not_contains?: Maybe<Scalars['String']>,
  message_starts_with?: Maybe<Scalars['String']>,
  message_not_starts_with?: Maybe<Scalars['String']>,
  message_ends_with?: Maybe<Scalars['String']>,
  message_not_ends_with?: Maybe<Scalars['String']>,
  isPrivate?: Maybe<Scalars['Boolean']>,
  isPrivate_not?: Maybe<Scalars['Boolean']>,
  createdAt?: Maybe<Scalars['DateTime']>,
  createdAt_not?: Maybe<Scalars['DateTime']>,
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  createdAt_lt?: Maybe<Scalars['DateTime']>,
  createdAt_lte?: Maybe<Scalars['DateTime']>,
  createdAt_gt?: Maybe<Scalars['DateTime']>,
  createdAt_gte?: Maybe<Scalars['DateTime']>,
  updatedAt?: Maybe<Scalars['DateTime']>,
  updatedAt_not?: Maybe<Scalars['DateTime']>,
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,
  updatedAt_lt?: Maybe<Scalars['DateTime']>,
  updatedAt_lte?: Maybe<Scalars['DateTime']>,
  updatedAt_gt?: Maybe<Scalars['DateTime']>,
  updatedAt_gte?: Maybe<Scalars['DateTime']>,
  AND?: Maybe<Array<TransactionWhereInput>>,
  OR?: Maybe<Array<TransactionWhereInput>>,
  NOT?: Maybe<Array<TransactionWhereInput>>,
};


export type User = {
   __typename?: 'User',
  account: Account,
  contact?: Maybe<Contact>,
  id: Scalars['ID'],
  recipientBeneficiaryRequests?: Maybe<Array<BeneficiaryRequest>>,
  senderBeneficiaryRequests?: Maybe<Array<BeneficiaryRequest>>,
  transactionsReceived?: Maybe<Array<Transaction>>,
  transactionsSent?: Maybe<Array<Transaction>>,
};


export type UserRecipientBeneficiaryRequestsArgs = {
  where?: Maybe<BeneficiaryRequestWhereInput>,
  orderBy?: Maybe<BeneficiaryRequestOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserSenderBeneficiaryRequestsArgs = {
  where?: Maybe<BeneficiaryRequestWhereInput>,
  orderBy?: Maybe<BeneficiaryRequestOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserTransactionsReceivedArgs = {
  where?: Maybe<TransactionWhereInput>,
  orderBy?: Maybe<TransactionOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};


export type UserTransactionsSentArgs = {
  where?: Maybe<TransactionWhereInput>,
  orderBy?: Maybe<TransactionOrderByInput>,
  skip?: Maybe<Scalars['Int']>,
  after?: Maybe<Scalars['String']>,
  before?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>
};

export type UserInput = {
   __typename?: 'UserInput',
  id: Scalars['String'],
  query: Scalars['String'],
};

export type UserInputRequest = {
   __typename?: 'UserInputRequest',
  jobID: Scalars['String'],
  status?: Maybe<Scalars['String']>,
  userInputs: Array<Maybe<UserInput>>,
};

export type UserInputResponse = {
  id: Scalars['String'],
  response: Scalars['String'],
};

export type UserWhereInput = {
  id?: Maybe<Scalars['ID']>,
  id_not?: Maybe<Scalars['ID']>,
  id_in?: Maybe<Array<Scalars['ID']>>,
  id_not_in?: Maybe<Array<Scalars['ID']>>,
  id_lt?: Maybe<Scalars['ID']>,
  id_lte?: Maybe<Scalars['ID']>,
  id_gt?: Maybe<Scalars['ID']>,
  id_gte?: Maybe<Scalars['ID']>,
  id_contains?: Maybe<Scalars['ID']>,
  id_not_contains?: Maybe<Scalars['ID']>,
  id_starts_with?: Maybe<Scalars['ID']>,
  id_not_starts_with?: Maybe<Scalars['ID']>,
  id_ends_with?: Maybe<Scalars['ID']>,
  id_not_ends_with?: Maybe<Scalars['ID']>,
  account?: Maybe<AccountWhereInput>,
  contact?: Maybe<ContactWhereInput>,
  transactionsSent_every?: Maybe<TransactionWhereInput>,
  transactionsSent_some?: Maybe<TransactionWhereInput>,
  transactionsSent_none?: Maybe<TransactionWhereInput>,
  transactionsReceived_every?: Maybe<TransactionWhereInput>,
  transactionsReceived_some?: Maybe<TransactionWhereInput>,
  transactionsReceived_none?: Maybe<TransactionWhereInput>,
  senderBeneficiaryRequests_every?: Maybe<BeneficiaryRequestWhereInput>,
  senderBeneficiaryRequests_some?: Maybe<BeneficiaryRequestWhereInput>,
  senderBeneficiaryRequests_none?: Maybe<BeneficiaryRequestWhereInput>,
  recipientBeneficiaryRequests_every?: Maybe<BeneficiaryRequestWhereInput>,
  recipientBeneficiaryRequests_some?: Maybe<BeneficiaryRequestWhereInput>,
  recipientBeneficiaryRequests_none?: Maybe<BeneficiaryRequestWhereInput>,
  AND?: Maybe<Array<UserWhereInput>>,
  OR?: Maybe<Array<UserWhereInput>>,
  NOT?: Maybe<Array<UserWhereInput>>,
};
