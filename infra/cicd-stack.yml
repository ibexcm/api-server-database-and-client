AWSTemplateFormatVersion: 2010-09-09
Description: Plantilla Base para procesos de CICD

# Definicion de Parametros
Parameters:
  TipoAmbiente:
    Type: String
  EnvTag:
    Type: String
  KMSKeyARN:
    Type: String
  VPCID:
    Type: String
  subnetPrivateA:
    Type: String
  subnetPrivateB:
    Type: String
  graphqlSg:
    Type: String
  APIDomain:
    Type: String
  bucketAdmin:
    Type: String
  distributionAdmin:
    Type: String
  bucketWeb:
    Type: String
  distributionWeb:
    Type: String

# Determina si el recurso sera para Produccion o para Test
Conditions:
  condAmbientePRO: !Or [ !Equals [ !Ref TipoAmbiente, PROD ], !Equals [ !Ref TipoAmbiente, prod ] ]

# Definicion de Recursos
Resources:
  myBucketCICD:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [ !Ref EnvTag, "ibexcm-cicd" ] ]
      BucketEncryption: 
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref KMSKeyARN
              SSEAlgorithm: aws:kms
      Tags:
        - Key: Env
          Value: !Ref EnvTag

  myIAMRoleWebClient:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: !Join [ "-", [ !Ref EnvTag, "webclient" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: pol1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-webclient"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-webclient:*"
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvent
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${EnvTag}-webclient-*"
                Action: 
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${myBucketCICD}/*"
                  - !Sub "arn:aws:s3:::${bucketWeb}/*"
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${distributionWeb}"
                Action: 
                  - cloudfront:CreateInvalidation
      Path: /cicd/
      Tags: 
        - Key: Env
          Value: !Ref EnvTag

  myIAMRoleAdminClient:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: !Join [ "-", [ !Ref EnvTag, "adminclient" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: pol1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-adminclient"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-adminclient:*"
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvent
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${EnvTag}-adminclient-*"
                Action: 
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${myBucketCICD}/*"
                  - !Sub "arn:aws:s3:::${bucketAdmin}/*"
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${distributionAdmin}"
                Action: 
                  - cloudfront:CreateInvalidation
      Path: /cicd/
      Tags: 
        - Key: Env
          Value: !Ref EnvTag

  myIAMRoleGraphql:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: !Join [ "-", [ !Ref EnvTag, "graphql" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: pol1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-graphql"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-graphql:*"
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvent
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${EnvTag}-graphql-*"
                Action: 
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${myBucketCICD}/*"
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
              - Effect: Allow
                Resource: 
                  - "*"
                Action: 
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                Action: 
                  - ec2:CreateNetworkInterfacePermission
                Condition:
                  StringEquals:
                    ec2:Subnet: 
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${subnetPrivateA}"
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${subnetPrivateB}"
                    ec2:AuthorizedService: codebuild.amazonaws.com
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
                Action: 
                  - ssm:GetParameters
              - Effect: Allow
                Resource:
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
                Action: 
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
      Path: /cicd/
      Tags: 
        - Key: Env
          Value: !Ref EnvTag

  myIAMRoleGraphqlDeploy:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: !Join [ "-", [ !Ref EnvTag, "graphql-deploy" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: pol1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-graphql-deploy"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${EnvTag}-graphql-deploy:*"
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvent
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${EnvTag}-graphql-deploy-*"
                Action: 
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
              - Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${myBucketCICD}/*"
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
      Path: /cicd/
      Tags: 
        - Key: Env
          Value: !Ref EnvTag

  myIAMRoleGraphqlPipeline:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: !Join [ "-", [ !Ref EnvTag, "graphql-pipeline" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: pol1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                    - cloudformation.amazonaws.com
                    - elasticbeanstalk.amazonaws.com
                    - ec2.amazonaws.com
                    - ecs-tasks.amazonaws.com
              - Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: "*"
                Effect: Allow
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - Action:
                  - codestar-connections:UseConnection
                Resource: "*"
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: "*"
                Effect: Allow
              - Action:
                  - opsworks:CreateDeployment
                  - opsworks:DescribeApps
                  - opsworks:DescribeCommands
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeStacks
                  - opsworks:UpdateApp
                  - opsworks:UpdateStack
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: "*"
              - Effect: Allow
                Action:
                  - servicecatalog:ListProvisioningArtifacts
                  - servicecatalog:CreateProvisioningArtifact
                  - servicecatalog:DescribeProvisioningArtifact
                  - servicecatalog:DeleteProvisioningArtifact
                  - servicecatalog:UpdateProduct
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:StartExecution
                Resource: "*"
      Path: /cicd/
      Tags: 
        - Key: Env
          Value: !Ref EnvTag

  myBuildAdmin: 
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Join [ "-", [ !Ref EnvTag, "adminclient" ] ]
      ServiceRole: !GetAtt myIAMRoleAdminClient.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables: 
          - Name: API_DOMAIN
            Type: PLAINTEXT 
            Value: !Ref APIDomain
          - Name: S3_BUCKET
            Type: PLAINTEXT 
            Value: !Ref bucketAdmin
          - Name: CF_DISTRIBUTION
            Type: PLAINTEXT 
            Value: !Ref distributionAdmin
      Source:
        Auth: 
          Type: OAUTH
        GitCloneDepth: 1
        BuildSpec: adminclient/buildspec.yml
        Location: https://github.com/ibexmercado/crypto-mercado.git
        ReportBuildStatus: true
        Type: GITHUB
      LogsConfig: 
        CloudWatchLogs:
          Status: ENABLED
      Tags:
        - Key: Env
          Value: !Ref EnvTag
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_MERGED
            - Type: BASE_REF
              Pattern: !If [condAmbientePRO, "^refs/heads/production$", "^refs/heads/staging$"]
              ExcludeMatchedPattern: false
            - Type: FILE_PATH
              Pattern: adminclient/*
              ExcludeMatchedPattern: false

  myBuildWeb: 
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Join [ "-", [ !Ref EnvTag, "webclient" ] ]
      ServiceRole: !GetAtt myIAMRoleWebClient.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables: 
          - Name: API_DOMAIN
            Type: PLAINTEXT 
            Value: !Ref APIDomain
          - Name: S3_BUCKET
            Type: PLAINTEXT 
            Value: !Ref bucketAdmin
          - Name: CF_DISTRIBUTION
            Type: PLAINTEXT 
            Value: !Ref distributionAdmin
      Source:
        Auth: 
          Type: OAUTH
        GitCloneDepth: 1
        BuildSpec: webclient/buildspec.yml
        Location: https://github.com/ibexmercado/crypto-mercado.git
        ReportBuildStatus: true
        Type: GITHUB
      LogsConfig: 
        CloudWatchLogs:
          Status: ENABLED
      Tags:
        - Key: Env
          Value: !Ref EnvTag
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_MERGED
            - Type: BASE_REF
              Pattern: !If [condAmbientePRO, "^refs/heads/production$", "^refs/heads/staging$"]
              ExcludeMatchedPattern: false
            - Type: FILE_PATH
              Pattern: webclient/*
              ExcludeMatchedPattern: false

  myBuildGraph: 
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Join [ "-", [ !Ref EnvTag, "graphql" ] ]
      ServiceRole: !GetAtt myIAMRoleGraphql.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables: 
          - Name: AWS_DEFAULT_REGION
            Type: PLAINTEXT 
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT 
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT 
            Value: !Join [ "/", [ !Ref EnvTag, "ibex", "graphql" ] ]
          - Name: IMAGE_TAG
            Type: PLAINTEXT 
            Value: 1.0
          - Name: JWT_PRIVATE_KEY
            Type: PARAMETER_STORE 
            Value: !If [condAmbientePRO, "PROD_JWT_PRIVATE_KEY", "JWT_PRIVATE_KEY"] 
          - Name: JWT_PUBLIC_KEY
            Type: PARAMETER_STORE 
            Value: !If [condAmbientePRO, "PROD_JWT_PUBLIC_KEY", "JWT_PUBLIC_KEY"] 
          - Name: PRISMA_SECRET
            Type: PARAMETER_STORE 
            Value: !If [condAmbientePRO, "PROD_PRISMA_SECRET", "PRISMA_SECRET"] 
          - Name: PRISMA_ENDPOINT
            Type: PLAINTEXT 
            Value: !Sub "http://prisma.${EnvTag}.ibexcm.internal"
      VpcConfig:
        VpcId: !Ref VPCID
        Subnets:
          - !Ref subnetPrivateA
          - !Ref subnetPrivateB
        SecurityGroupIds: 
          - !Ref graphqlSg
      Source:
        Auth: 
          Type: OAUTH
        GitCloneDepth: 1
        BuildSpec: graphqlserver/buildspec-docker.yml
        Location: https://github.com/ibexmercado/crypto-mercado.git
        ReportBuildStatus: true
        Type: GITHUB
      LogsConfig: 
        CloudWatchLogs:
          Status: ENABLED
      Tags:
        - Key: Env
          Value: !Ref EnvTag
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_MERGED
            - Type: BASE_REF
              Pattern: !If [condAmbientePRO, "^refs/heads/production$", "^refs/heads/staging$"]
              ExcludeMatchedPattern: false
            - Type: FILE_PATH
              Pattern: graphqlserver/*
              ExcludeMatchedPattern: false

  myBuildGraphDeploy: 
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Join [ "-", [ !Ref EnvTag, "graphql-deploy" ] ]
      ServiceRole: !GetAtt myIAMRoleGraphqlDeploy.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      Source:
        BuildSpec: !Sub 
                - |
                  version: 0.2
                  phases:
                    build:
                      commands:
                        - env
                        - printf '[{"name":"graphql-container","imageUri":"%s"}]' ${ID}.dkr.ecr.${Region}.amazonaws.com/${Env}/ibex/graphql:latest > imagedefinitions.json
                  artifacts:
                    files:
                      - ./imagedefinitions.json
                - ID: !Ref AWS::AccountId
                  Region: !Ref AWS::Region
                  Env: !Ref EnvTag
        Type: CODEPIPELINE
      LogsConfig: 
        CloudWatchLogs:
          Status: ENABLED
      Tags:
        - Key: Env
          Value: !Ref EnvTag

  myPipelineGraph:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: !Ref myBucketCICD
        Type: S3
      Name: !Join [ "-", [ !Ref EnvTag, "graphql" ] ]
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt myIAMRoleGraphqlPipeline.Arn
      Stages: 
        - Name: Source
          Actions: 
            - Name: ECR
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: "1"
              Configuration:
                RepositoryName: !Sub "${EnvTag}/ibex/graphql"
              Namespace: SourceVariables
              OutputArtifacts: 
                - Name: SourceArtifact
              Region: !Ref AWS::Region
        - Name: Build
          Actions: 
            - Name: CodeBuild
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref myBuildGraphDeploy
              Namespace: BuildVariables
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts: 
                - Name: BuildArtifact
              Region: !Ref AWS::Region
        - Name: Deploy
          Actions: 
            - Name: ECS
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: "1"
              Configuration:
                ClusterName: !Join [ "-", [ !Ref EnvTag, "ibexcm" ] ]
                FileName: imagedefinitions.json
                ServiceName: service-graphql
              InputArtifacts:
                - Name: BuildArtifact
              Region: !Ref AWS::Region
      Tags: 
        - Key: Env
          Value: !Ref EnvTag