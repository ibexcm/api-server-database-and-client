input AdminGetTransactionsInput {
  where: TransactionWhereInput
  orderBy: TransactionOrderByInput
}

input AdminMarkTransactionAsPaidInput {
  transactionID: String!
}

input SetBitcoinTransactionReceiptEvidenceInput {
  transactionHash: String!
}

input SetFiatTransactionReceiptEvidenceInput {
  fileHash: String!
}

input SetTransactionReceiptEvidenceInput {
  transactionID: String!
  bitcoin: SetBitcoinTransactionReceiptEvidenceInput
  fiat: SetFiatTransactionReceiptEvidenceInput
}

input GetTransactionInput {
  transactionID: String!
}

input CreateTransactionInput {
  amount: String
  sender: CreateTransactionUserInput!
  recipient: CreateTransactionUserInput
}

input CreateTransactionUserInput {
  cryptoAccountID: String
  bankAccountID: String
}

input GetTransactionBreakdownInput {
  amount: String
  sender: CreateTransactionUserInput
  recipient: CreateTransactionUserInput
}

union TransactionBreakdown =
    BitcoinToFiatTransactionBreakdown
  | FiatToBitcoinTransactionBreakdown

type BitcoinToFiatTransactionBreakdown {
  price: TransactionBreakdownField!
  amount: TransactionBreakdownField!
  fee: TransactionBreakdownField!
  tax: TransactionBreakdownField!
  total: TransactionBreakdownField!
  exchangeRate: TransactionBreakdownField
  priceAtRate: TransactionBreakdownField
}

type FiatToBitcoinTransactionBreakdown {
  price: TransactionBreakdownField!
  amount: TransactionBreakdownField!
  fee: TransactionBreakdownField!
  tax: TransactionBreakdownField!
  total: TransactionBreakdownField!
  exchangeRate: TransactionBreakdownField
  priceAtRate: TransactionBreakdownField
}

type TransactionBreakdownField {
  key: String!
  value: String!
}
