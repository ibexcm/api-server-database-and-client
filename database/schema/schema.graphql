type User {
  id: ID! @id
  role: UserRole! @relation(link: INLINE)
  contact: Contact! @relation(link: INLINE, onDelete: CASCADE)
  account: Account @relation(link: INLINE, onDelete: CASCADE)
  profile: Profile @relation(link: INLINE, onDelete: CASCADE)
  bankAccount: [BankAccount] @relation(onDelete: CASCADE)
  cryptoAccount: [CryptoAccount] @relation(onDelete: CASCADE)
  transactions: [Transaction] @relation(onDelete: CASCADE)
}

type UserRole {
  id: ID! @id
  type: TUserRole! @unique
}

enum TUserRole {
  ADMIN
  USER
}

type BankAccount {
  id: ID! @id
  fullName: String!
  accountNumber: String! @unique
  bankAccountType: BankAccountType!
  bank: Bank!
  isCurrent: Boolean @default(value: false)
  user: User!
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

type Bank { # from seed
  id: ID! @id
  name: String! @unique
  imgHash: String
}

type BankAccountType {
  id: ID! @id
  type: String! # monetaria | ahorro
  currency: Currency!
}

type Account {
  id: ID! @id
  password: String!
  clientID: String! @unique
  user: User!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type CryptoAccount {
  id: ID! @id
  address: String! @unique
  user: User!
  currency: Currency!
  createdAt: DateTime! @createdAt
}

type Profile {
  id: ID! @id
  governmentID: [GovernmentID] @relation(onDelete: CASCADE)
  user: User!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type GovernmentID { # Support for multiple types of IDs
  id: ID! @id
  guatemalaDPI: [guatemalaDPI]
    @relation(name: "GovernmentIDToGuatemalaDPI", link: TABLE, onDelete: CASCADE)
  profile: Profile!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type guatemalaDPI {
  id: ID! @id
  fileHash: String!
  firstName: String
  lastName: String
  CUI: String
  dateOfBirth: DateTime
  genre: Genre
  expiresAt: DateTime
  governmentID: GovernmentID! @relation(name: "GovernmentIDToGuatemalaDPI")
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

enum Genre {
  MALE
  FEMALE
}

type Contact {
  id: ID! @id
  email: [Email] @relation(onDelete: CASCADE)
  phoneNumber: [PhoneNumber] @relation(onDelete: CASCADE)
  user: User!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Email {
  id: ID! @id
  address: String! @unique
  isCurrent: Boolean @default(value: false)
  contact: Contact!
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

type PhoneNumber {
  id: ID! @id
  number: String! @unique
  isCurrent: Boolean @default(value: false)
  contact: Contact!
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

type TransactionFee {
  id: ID! @id
  fee: String! # decimal / percentage
}

type Sender {
  id: ID! @id
  sender: User!
  bankAccount: BankAccount
  cryptoAccount: CryptoAccount
  adminBankAccount: AdminBankAccount
}

type TransactionReceiptEvidence {
  id: ID! @id
  bitcoinTxID: String
  fileHash: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type TransactionReceipt {
  id: ID! @id
  evidence: [TransactionReceiptEvidence]
  toCurrency: Currency! @relation(name: "TransactionReceiptToCurrency")
  fromCurrency: Currency! @relation(name: "TransactionReceiptFromCurrency")
  paidAt: DateTime # only by admin!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Transaction {
  id: ID! @id
  amount: String! @default(value: "0.00")
  sender: Sender!
  fee: TransactionFee!
  receipt: TransactionReceipt!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Currency {
  id: ID! @id
  name: String! @unique
  symbol: String! @unique
  createdAt: DateTime! @createdAt
}

# ADMIN Management
type AdminBankAccount {
  id: ID! @id
  fullName: String!
  accountNumber: String! @unique
  bankAccountType: BankAccountType!
  bank: Bank!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
