type User {
  id: ID! @id
  role: UserRole! @relation(link: INLINE)
  contact: Contact! @relation(link: INLINE, onDelete: CASCADE)
  account: Account @relation(link: INLINE, onDelete: CASCADE)
  profile: Profile @relation(link: INLINE, onDelete: CASCADE)
  bankAccounts: [BankAccount] @relation(onDelete: CASCADE)
  cryptoAccounts: [CryptoAccount] @relation(onDelete: CASCADE)
  transactions: [Transaction] @relation(onDelete: CASCADE)
}

type UserRole {
  id: ID! @id
  type: TUserRole! @unique
}

enum TUserRole {
  ADMIN
  CUSTOMER
}

type Country {
  id: ID! @id
  name: String! @unique
  symbol: String! @unique
  phoneNumberCode: String! @unique
}

type BankAccount {
  id: ID! @id
  guatemala: GuatemalaBankAccount @relation(onDelete: CASCADE)
  currency: Currency!
  user: User!
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

type Bank { # from seed
  id: ID! @id
  name: String! @unique
  imgHash: String
  country: Country!
}

type Account {
  id: ID! @id
  password: String!
  clientID: String! @unique
  user: User!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type BitcoinAccount {
  id: ID! @id
  address: String! @unique
  xpub: String
  cryptoAccount: CryptoAccount!
    @relation(name: "BitcoinAccountToCryptoAccount", link: INLINE)
}

type CryptoAccount {
  id: ID! @id
  bitcoin: BitcoinAccount @relation(name: "BitcoinAccountToCryptoAccount")
  user: User!
  currency: Currency!
  createdAt: DateTime! @createdAt
}

type Profile {
  id: ID! @id
  documents: ProfileDocument @relation(onDelete: CASCADE)
  user: User!
  country: Country!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProfileDocument {
  id: ID! @id
  guatemala: GuatemalaDocument @relation(onDelete: CASCADE, link: INLINE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum TGenre {
  MALE
  FEMALE
}

type Contact {
  id: ID! @id
  email: [Email] @relation(onDelete: CASCADE)
  phoneNumber: [PhoneNumber] @relation(onDelete: CASCADE)
  user: User!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Email {
  id: ID! @id
  address: String! @unique
  isCurrent: Boolean @default(value: false)
  contact: Contact!
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

type PhoneNumber {
  id: ID! @id
  number: String! @unique
  isCurrent: Boolean @default(value: false)
  contact: Contact!
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

type TransactionFee {
  id: ID! @id
  fee: String! # decimal / percentage
  transaction: Transaction! @relation(name: "TransactionFeeToTransaction", link: INLINE)
}

type Sender {
  id: ID! @id
  user: User!
  bankAccount: BankAccount @relation(name: "SenderToBankAccount", link: INLINE)
  cryptoAccount: CryptoAccount @relation(name: "SenderToCryptoAccount", link: INLINE)
  transaction: Transaction! @relation(name: "SenderToTransaction")
}

type Recipient {
  id: ID! @id
  user: User!
  bankAccount: BankAccount @relation(name: "RecipientToBankAccount", link: INLINE)
  cryptoAccount: CryptoAccount @relation(name: "RecipientToCryptoAccount", link: INLINE)
  transaction: Transaction! @relation(name: "RecipientToTransaction")
}

type BitcoinReceiptEvidence {
  id: ID! @id
  transactionHash: String
  transaction: Transaction!
}

type BankReceiptEvidence {
  id: ID! @id
  fileHash: String
  transaction: Transaction!
}

type TransactionReceiptEvidence {
  id: ID! @id
  bitcoinReceipt: BitcoinReceiptEvidence
  bankReceipt: BankReceiptEvidence
  transaction: Transaction!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type TransactionReceipt {
  id: ID! @id
  evidence: [TransactionReceiptEvidence]
  fromCurrency: Currency! @relation(name: "TransactionReceiptFromCurrency")
  toCurrency: Currency! @relation(name: "TransactionReceiptToCurrency")
  paidAt: DateTime # only by admin!
  transaction: Transaction! @relation(name: "TransactionReceiptToTransaction")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Transaction {
  id: ID! @id
  amount: String! @default(value: "0.00")
  sender: Sender! @relation(name: "SenderToTransaction", link: INLINE)
  recipient: Recipient! @relation(name: "RecipientToTransaction", link: INLINE)
  receipt: TransactionReceipt!
    @relation(name: "TransactionReceiptToTransaction", link: INLINE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Currency {
  id: ID! @id
  name: String! @unique
  symbol: String! @unique
  createdAt: DateTime! @createdAt
}

# GUATEMALA
type GuatemalaBankAccount {
  id: ID! @id
  fullName: String!
  accountNumber: String!
  bankAccountType: TGuatemalaBankAccount!
  bank: Bank!
  isCurrent: Boolean @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum TGuatemalaBankAccount {
  MONETARIA
  AHORRO
}

type GuatemalaDPI {
  id: ID! @id
  fileHash: String!
  firstName: String
  lastName: String
  CUI: String
  dateOfBirth: DateTime
  genre: TGenre
  expiresAt: DateTime
  guatemalaDocument: GuatemalaDocument! @relation(name: "GuatemalaDocumentToGuatemalaDPI")
  verifiedAt: DateTime
  createdAt: DateTime! @createdAt
}

type GuatemalaDocument {
  id: ID! @id
  dpi: [GuatemalaDPI] @relation(onDelete: CASCADE, name: "GuatemalaDocumentToGuatemalaDPI")
  profileDocument: ProfileDocument!
}
